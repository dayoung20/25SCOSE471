import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# Load data
df = pd.read_csv("merged_preprocessing.csv", low_memory=False)

# Binning: Achievement level
df['achievement_level'] = df['achievement level'].apply(
    lambda x: 'Achievement=High' if x >= 4.0 else ('Achievement=Medium' if x >= 3.0 else 'Achievement=Low')
)

# Binning: Attendance rate
def bin_attendance(rate):
    if rate >= 0.9:
        return 'Attend=High'
    elif rate >= 0.7:
        return 'Attend=Medium'
    else:
        return 'Attend=Low'

df['attendance rate'] = pd.to_numeric(df['attendance rate'], errors='coerce')
df = df.dropna(subset=['attendance rate'])
df['attendance_bin'] = df['attendance rate'].apply(bin_attendance)

# Binning: Course difficulty
def bin_difficulty(x):
    if x >= 4.0:
        return 'Difficulty=High'
    elif x >= 3.0:
        return 'Difficulty=Medium'
    else:
        return 'Difficulty=Low'

df['course difficulty'] = pd.to_numeric(df['course difficulty'], errors='coerce')
df = df.dropna(subset=['course difficulty'])
df['difficulty_bin'] = df['course difficulty'].apply(bin_difficulty)

# Binning: Teaching ability 
def bin_teaching(x):
    if x >= 4.0:
        return 'Teaching=High'
    elif x >= 3.0:
        return 'Teaching=Medium'
    else:
        return 'Teaching=Low'

df['teaching ability'] = pd.to_numeric(df['teaching ability'], errors='coerce')
df = df.dropna(subset=['teaching ability'])
df['teaching_bin'] = df['teaching ability'].apply(bin_teaching)

# Binning: Learning load
def bin_learning(x):
    if x >= 4.0:
        return 'Load=High'
    elif x >= 3.0:
        return 'Load=Medium'
    else:
        return 'Load=Low'

df['learning load'] = pd.to_numeric(df['learning load'], errors='coerce')
df = df.dropna(subset=['learning load'])
df['load_bin'] = df['learning load'].apply(bin_learning)

# Create transactions
transactions = []
for _, row in df.iterrows():
    items = [
        row['attendance_bin'],
        row['difficulty_bin'],
        row['teaching_bin'],
        row['load_bin'],
        row['achievement_level']
    ]
    transactions.append(items)

# Transaction encoding
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df_encoded = pd.DataFrame(te_ary, columns=te.columns_)

# Run Apriori
frequent_itemsets = apriori(df_encoded, min_support=0.005, use_colnames=True)
if frequent_itemsets.empty:
    print("No frequent itemsets found. Try lowering min_support further.")
    exit()

rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.5)

# Filter for rules involving achievement level
rules_score_related = rules[
    rules['consequents'].apply(lambda x: any('Achievement=' in item for item in x)) |
    rules['antecedents'].apply(lambda x: any('Achievement=' in item for item in x))
]

# Sort and display all rules
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)
top_rules = rules_score_related.sort_values(by='lift', ascending=False)
print(top_rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])

# Export to CSV
top_rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']].to_csv("rules.csv", index=False)
